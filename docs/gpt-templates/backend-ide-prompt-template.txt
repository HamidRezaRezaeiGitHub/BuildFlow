[backend][TASK] <short, imperative title>

Objective:
<Describe what the backend should implement or change, in one sentence.>

Read before acting:
- Inspect or update these files: (No need to provide full paths)
  - [backend] <module>/<File>.java
  - [backend] <module>/<TestFile>.java
  - (If applicable) [backend] src/main/resources/<config>.yml

Acceptance Criteria:
- <AC1: implemented behavior or endpoint contract>
- <AC2: validation or business rule>
- <AC3: unit/integration test expectation>
- 'mvn -q -DskipTests=false clean test' and 'mvn -q -DskipTests=true package' complete without errors.
- Related README.md files are updated if necessary. 
- Update Files Structure of README.md at the root of the project, if new files/modules are added (or removed).

Constraints & Hints:
- <Constraint 1>
- <Constraint 2>
- <Hint 1>
- <Hint 2>

---
### ðŸ§© Example

[backend][TASK] Add ProjectService with CRUD and validation

Objective:
Introduce a ProjectService that encapsulates CRUD operations and validates builder/owner references.

Read before acting:
- [backend] Project.java
- [backend] ProjectRepository.java
- [backend] ProjectService.java
- [backend] ProjectServiceTest.java

Acceptance Criteria:
- Service exposes create/read/update/delete methods for Project.
- Validates presence of builder and owner; rejects invalid references.
- Unit tests cover happy paths and validation errors.
- 'mvn -q -DskipTests=false clean test' and 'mvn -q -DskipTests=true package' complete without errors.
- README.md in the project module is updated with service usage examples.
- Update Files Structure of README.md at the root of the project, if new files/modules are added (or removed).

Constraints & Hints:
- Keep controller thin; place logic in the service layer.
- Use DTOs at I/O boundaries to avoid entity leakage.