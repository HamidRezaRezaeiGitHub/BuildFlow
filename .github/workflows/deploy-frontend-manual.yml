name: Deploy Frontend to GitHub Pages (Manual)

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy from (leave empty to use current branch)'
        required: false
        default: ''
        type: string
      use_latest_open_pr:
        description: 'Deploy the latest open PR head branch (ignores branch input)'
        required: false
        default: false
        type: boolean

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    name: Build Frontend for GitHub Pages (Manual Deploy)
    runs-on: ubuntu-latest
    steps:
      - name: Determine branch to deploy
        id: branch-info
        uses: actions/github-script@v7
        with:
          script: |
            let deployBranch;
            
            if (${{ github.event.inputs.use_latest_open_pr }}) {
              // Get the most recently updated open PR
              const { data: prs } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                sort: 'updated',
                direction: 'desc',
                per_page: 1
              });
              
              if (prs.length === 0) {
                core.setFailed('No open PRs found');
                return;
              }
              
              deployBranch = prs[0].head.ref;
              console.log(`Latest open PR #${prs[0].number}: ${prs[0].title}`);
              console.log(`Deploying from PR head branch: ${deployBranch}`);
            } else if ('${{ github.event.inputs.branch }}') {
              deployBranch = '${{ github.event.inputs.branch }}';
              console.log(`Deploying from specified branch: ${deployBranch}`);
            } else {
              deployBranch = '${{ github.ref_name }}';
              console.log(`Deploying from current branch: ${deployBranch}`);
            }
            
            core.setOutput('branch', deployBranch);

      - name: Checkout specified branch
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.branch-info.outputs.branch }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.19.0'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run tests
        working-directory: ./frontend
        run: npm test

      - name: Run linting
        working-directory: ./frontend
        run: npm run lint

      - name: Build frontend with GitHub Pages profile
        working-directory: ./frontend
        env:
          VITE_BASE_PATH: /BuildFlow/
        run: npm run build -- --mode github-pages

      - name: Create 404.html for SPA routing
        working-directory: ./frontend
        run: cp dist/index.html dist/404.html

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './frontend/dist'

  deploy:
    name: Deploy to GitHub Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
